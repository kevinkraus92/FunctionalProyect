Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var delta = A2($Signal.map,
   $Time.inSeconds,
   $Time.fps(35));
   var asignColor = function (brick) {
      return brick.slowmo ? $Graphics$Collage.filled($Color.red) : brick.speedup ? $Graphics$Collage.filled($Color.green) : brick.bigball ? $Graphics$Collage.filled($Color.blue) : $Graphics$Collage.filled($Color.white);
   };
   var makeList = F2(function (objlist,
   shape) {
      return function () {
         switch (objlist.ctor)
         {case "::":
            return A2($List._op["::"],
              $Graphics$Collage.move({ctor: "_Tuple2"
                                     ,_0: objlist._0.x
                                     ,_1: objlist._0.y})(asignColor(objlist._0)(shape)),
              A2(makeList,objlist._1,shape));
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 342 and 347");
      }();
   });
   var make = F2(function (obj,
   shape) {
      return $Graphics$Collage.move({ctor: "_Tuple2"
                                    ,_0: obj.x
                                    ,_1: obj.y})($Graphics$Collage.filled($Color.white)(shape));
   });
   var msgNextLevel = "Next level";
   var msgLost = "Lost";
   var msgWon = "Won";
   var msg = "SPACE to start, &larr;&rarr; to move . \nRojo - slowmotion. \nAzul - pelota grande. \nVerde - pelota rapida";
   var textGreen = A3($Color.rgb,
   160,
   200,
   160);
   var txt = F2(function (f,
   string) {
      return $Graphics$Element.leftAligned(f($Text.monospace($Text.color(textGreen)($Text.fromString(string)))));
   });
   var pong = A3($Color.rgb,0,0,0);
   var stepVy = F8(function (vx,
   vy,
   upperCollision,
   lowerCollision,
   playerCollision,
   brickCollision,
   specialBlock,
   ball) {
      return playerCollision ? -1 * vy : brickCollision && $Basics.not(ball.slowmo) ? -1 * vy * specialBlock : brickCollision ? -1 * vy : upperCollision ? $Basics.abs(vy) : lowerCollision ? 0 - $Basics.abs(vy) : vy;
   });
   var stepVx = F4(function (vx,
   vy,
   leftCollision,
   rightCollision) {
      return leftCollision ? $Basics.abs(vx) : rightCollision ? 0 - $Basics.abs(vx) : vx;
   });
   var near = F3(function (punto,
   rango,
   nuevopunto) {
      return _U.cmp(nuevopunto,
      punto - rango) > -1 && _U.cmp(nuevopunto,
      punto + rango) < 1;
   });
   var physicsUpdatePlayer = F2(function (t,
   _v3) {
      return function () {
         return _U.replace([["x"
                            ,_v3.x + _v3.vx * t]
                           ,["y",_v3.y + _v3.vy * t]],
         _v3);
      }();
   });
   var physicsUpdate = F2(function (t,
   _v5) {
      return function () {
         return _U.replace([["x"
                            ,_v5.x + _v5.vx * t]
                           ,["y",_v5.y + _v5.vy * t]],
         _v5);
      }();
   });
   var countBricks = function (bricks) {
      return function () {
         switch (bricks.ctor)
         {case "::":
            return 1 + countBricks(bricks._1);
            case "[]": return 0;}
         _U.badCase($moduleName,
         "between lines 217 and 219");
      }();
   };
   var isCollidingBigBallBrickFunction = F2(function (brick,
   ball) {
      return ball.bigball || brick.bigball;
   });
   var brickSpecialMultiplierFunction = F2(function (brick,
   ball) {
      return brick.slowmo ? 0.5 : brick.speedup ? 2.0 : 1;
   });
   var emptyCollidingBigballBrickFunction = F2(function (_v10,
   ball) {
      return function () {
         switch (_v10.ctor)
         {case "[]":
            return ball.bigball;}
         _U.badCase($moduleName,
         "on line 204, column 46 to 58");
      }();
   });
   var emptyBrickSpecialMultiplierFunction = F2(function (_v12,
   ball) {
      return function () {
         switch (_v12.ctor)
         {case "[]": return 1;}
         _U.badCase($moduleName,
         "on line 202, column 47 to 48");
      }();
   });
   var emptyCollidingBrickFunction = F2(function (_v14,
   ball) {
      return function () {
         switch (_v14.ctor)
         {case "[]": return false;}
         _U.badCase($moduleName,
         "on line 200, column 39 to 44");
      }();
   });
   var isCollidingBrickFunction = F2(function (brick,
   ball) {
      return true;
   });
   var Input = F3(function (a,
   b,
   c) {
      return {_: {}
             ,delta: c
             ,dir1: b
             ,space: a};
   });
   var input = $Signal.sampleOn(delta)(A4($Signal.map3,
   Input,
   $Keyboard.space,
   A2($Signal.map,
   function (_) {
      return _.x;
   },
   $Keyboard.arrows),
   delta));
   var Game = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,ball: b
             ,bricks: d
             ,level: e
             ,player: c
             ,state: a};
   });
   var Brick = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,active: c
             ,bigball: e
             ,slowmo: d
             ,speedup: f
             ,x: a
             ,y: b};
   });
   var Player = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,score: e
             ,vx: c
             ,vy: d
             ,x: a
             ,y: b};
   });
   var player = function (x) {
      return A5(Player,
      x,
      -250,
      0,
      0,
      0);
   };
   var Ball = F7(function (a,
   b,
   c,
   d,
   e,
   f,
   g) {
      return {_: {}
             ,bigball: f
             ,slowmo: e
             ,speedup: g
             ,vx: c
             ,vy: d
             ,x: a
             ,y: b};
   });
   var WonLevel1 = {ctor: "WonLevel1"};
   var Lost = {ctor: "Lost"};
   var Won = {ctor: "Won"};
   var Pause = {ctor: "Pause"};
   var defaultGame = {_: {}
                     ,ball: A7(Ball,
                     0,
                     0,
                     200,
                     200,
                     false,
                     false,
                     false)
                     ,bricks: _L.fromArray([A6(Brick,
                                           -200,
                                           100,
                                           1,
                                           false,
                                           true,
                                           false)
                                           ,A6(Brick,
                                           -100,
                                           100,
                                           1,
                                           false,
                                           false,
                                           false)
                                           ,A6(Brick,
                                           0,
                                           100,
                                           1,
                                           false,
                                           false,
                                           false)
                                           ,A6(Brick,
                                           100,
                                           100,
                                           1,
                                           false,
                                           false,
                                           false)
                                           ,A6(Brick,
                                           200,
                                           100,
                                           1,
                                           false,
                                           false,
                                           false)
                                           ,A6(Brick,
                                           -200,
                                           250,
                                           1,
                                           false,
                                           false,
                                           false)
                                           ,A6(Brick,
                                           -100,
                                           250,
                                           1,
                                           false,
                                           false,
                                           false)
                                           ,A6(Brick,
                                           0,
                                           250,
                                           1,
                                           true,
                                           false,
                                           false)
                                           ,A6(Brick,
                                           100,
                                           250,
                                           1,
                                           false,
                                           false,
                                           false)
                                           ,A6(Brick,
                                           200,
                                           250,
                                           1,
                                           false,
                                           false,
                                           true)])
                     ,level: 1
                     ,player: player(0)
                     ,state: Pause};
   var levelTwo = {_: {}
                  ,ball: A7(Ball,
                  0,
                  0,
                  200,
                  200,
                  false,
                  false,
                  false)
                  ,bricks: _L.fromArray([A6(Brick,
                                        -100,
                                        100,
                                        1,
                                        false,
                                        false,
                                        false)
                                        ,A6(Brick,
                                        0,
                                        100,
                                        1,
                                        false,
                                        false,
                                        false)
                                        ,A6(Brick,
                                        0,
                                        125,
                                        1,
                                        false,
                                        false,
                                        false)
                                        ,A6(Brick,
                                        0,
                                        150,
                                        1,
                                        false,
                                        false,
                                        false)
                                        ,A6(Brick,
                                        0,
                                        50,
                                        1,
                                        false,
                                        false,
                                        true)
                                        ,A6(Brick,
                                        100,
                                        100,
                                        1,
                                        false,
                                        false,
                                        false)])
                  ,level: 2
                  ,player: player(0)
                  ,state: Pause};
   var Play = {ctor: "Play"};
   var maxLevel = 3;
   var $ = {ctor: "_Tuple2"
           ,_0: -10
           ,_1: 10},
   yLowerProximity = $._0,
   yUpperProximity = $._1;
   var $ = {ctor: "_Tuple2"
           ,_0: -40
           ,_1: 40},
   xLeftProximity = $._0,
   xRightProximity = $._1;
   var inRange = F2(function (obj1,
   obj2) {
      return _U.cmp(obj1.x,
      obj2.x + xLeftProximity) > -1 && (_U.cmp(obj1.x,
      obj2.x + xRightProximity) < 1 && (_U.cmp(obj1.y,
      obj2.y + yLowerProximity) > -1 && _U.cmp(obj1.y,
      obj2.y + yUpperProximity) < 1));
   });
   var brickCollision = F4(function (bricks,
   ball,
   $function,
   empty) {
      return function () {
         switch (bricks.ctor)
         {case "::": return A2(inRange,
              ball,
              bricks._0) ? A2($function,
              bricks._0,
              ball) : A4(brickCollision,
              bricks._1,
              ball,
              $function,
              empty);
            case "[]": return A2(empty,
              _L.fromArray([]),
              ball);}
         _U.badCase($moduleName,
         "between lines 185 and 190");
      }();
   });
   var filterBrick = F2(function (ball,
   bricks) {
      return function () {
         switch (bricks.ctor)
         {case "::": return A2(inRange,
              ball,
              bricks._0) ? bricks._1 : A2($List._op["::"],
              bricks._0,
              A2(filterBrick,ball,bricks._1));
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 248 and 253");
      }();
   });
   var updateBricks = F3(function (delta,
   bricks,
   ball) {
      return A2(filterBrick,
      ball,
      bricks);
   });
   var $ = {ctor: "_Tuple2"
           ,_0: 240
           ,_1: 300},
   halfWidth = $._0,
   halfHeight = $._1;
   var updateBall = F4(function (t,
   _v22,
   p1,
   bricks) {
      return function () {
         return $Basics.not(A2(near,
         0,
         halfWidth)(_v22.x)) ? _U.replace([["x"
                                           ,0]
                                          ,["y",0]],
         _v22) : A2(physicsUpdate,
         t,
         _U.replace([["bigball"
                     ,A4(brickCollision,
                     bricks,
                     _v22,
                     isCollidingBigBallBrickFunction,
                     emptyCollidingBigballBrickFunction)]
                    ,["vx"
                     ,A4(stepVx,
                     _v22.vx,
                     _v22.vy,
                     _U.cmp(_v22.x,
                     7 - halfWidth) < 0,
                     _U.cmp(_v22.x,
                     halfWidth - 7) > 0)]
                    ,["vy"
                     ,A8(stepVy,
                     _v22.vx,
                     _v22.vy,
                     _U.cmp(_v22.y,
                     7 - halfHeight) < 0,
                     _U.cmp(_v22.y,
                     halfHeight - 7) > 0,
                     _U.cmp(_v22.x,
                     p1.x + xLeftProximity) > -1 && (_U.cmp(_v22.x,
                     p1.x + xRightProximity) < 1 && (_U.cmp(_v22.y,
                     p1.y - 10) > -1 && _U.cmp(_v22.y,
                     p1.y + 10) < 1)),
                     A4(brickCollision,
                     bricks,
                     _v22,
                     isCollidingBrickFunction,
                     emptyCollidingBrickFunction),
                     A4(brickCollision,
                     bricks,
                     _v22,
                     brickSpecialMultiplierFunction,
                     emptyBrickSpecialMultiplierFunction),
                     _v22)]],
         _v22));
      }();
   });
   var updatePlayer = F4(function (t,
   dir,
   points,
   player) {
      return function () {
         var player_aux = A2($Debug.watch,
         "p_aux",
         A2(physicsUpdatePlayer,
         t,
         _U.replace([["vx"
                     ,$Basics.toFloat(dir) * 200]],
         player)));
         return _U.replace([["x"
                            ,A3($Basics.clamp,
                            60 - halfHeight,
                            halfHeight - 60,
                            player_aux.x)]
                           ,["score"
                            ,player.score + points]],
         player_aux);
      }();
   });
   var update = F2(function (_v24,
   _v25) {
      return function () {
         return function () {
            return function () {
               var newBall = _U.eq(_v25.state,
               Pause) || (_U.eq(_v25.state,
               Won) || _U.eq(_v25.state,
               Lost)) ? _v25.ball : A4(updateBall,
               _v24.delta,
               _v25.ball,
               _v25.player,
               _v25.bricks);
               var newStateMoment = _v24.space && _U.eq(_v25.state,
               Play) ? Pause : _v24.space && _U.eq(_v25.state,
               Pause) ? Play : _U.eq(0,
               countBricks(_v25.bricks)) && _U.cmp(_v25.level,
               maxLevel) < 0 ? WonLevel1 : _U.eq(0,
               countBricks(_v25.bricks)) && _U.eq(_v25.level,
               maxLevel) ? Won : _U.cmp(_v25.ball.y,
               -280) < 0 ? Lost : _v25.state;
               var newBricks = _U.eq(newStateMoment,
               WonLevel1) ? _L.fromArray([A6(Brick,
                                         -100,
                                         100,
                                         1,
                                         true,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         -100,
                                         125,
                                         1,
                                         false,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         -100,
                                         75,
                                         1,
                                         false,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         -200,
                                         100,
                                         1,
                                         false,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         0,
                                         100,
                                         1,
                                         false,
                                         false,
                                         true)
                                         ,A6(Brick,
                                         0,
                                         125,
                                         1,
                                         false,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         0,
                                         150,
                                         1,
                                         false,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         0,
                                         75,
                                         1,
                                         false,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         0,
                                         50,
                                         1,
                                         false,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         100,
                                         100,
                                         1,
                                         false,
                                         true,
                                         false)
                                         ,A6(Brick,
                                         100,
                                         125,
                                         1,
                                         false,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         100,
                                         75,
                                         1,
                                         false,
                                         false,
                                         false)
                                         ,A6(Brick,
                                         200,
                                         100,
                                         1,
                                         false,
                                         false,
                                         false)]) : A3(updateBricks,
               _v24.delta,
               _v25.bricks,
               _v25.ball);
               var newState = _U.eq(newStateMoment,
               WonLevel1) ? Play : newStateMoment;
               var newLevel = _U.eq(newState,
               WonLevel1) ? _v25.level + 1 : _v25.level;
               var score1 = 0;
               return _U.replace([["state"
                                  ,newState]
                                 ,["ball",newBall]
                                 ,["player"
                                  ,A4(updatePlayer,
                                  _v24.delta,
                                  _v24.dir1,
                                  score1,
                                  _v25.player)]
                                 ,["bricks",newBricks]
                                 ,["level",newLevel]],
               _v25);
            }();
         }();
      }();
   });
   var gameState = A3($Signal.foldp,
   update,
   defaultGame,
   input);
   var $ = {ctor: "_Tuple2"
           ,_0: 480
           ,_1: 600},
   gameWidth = $._0,
   gameHeight = $._1;
   var view = F2(function (_v28,
   _v29) {
      return function () {
         return function () {
            switch (_v28.ctor)
            {case "_Tuple2":
               return function () {
                    var scores = A2(txt,
                    $Text.height(50),
                    "Desarrollado en Elm");
                    return A3($Graphics$Element.container,
                    _v28._0,
                    _v28._1,
                    $Graphics$Element.middle)(A3($Graphics$Collage.collage,
                    gameWidth,
                    gameHeight,
                    A2($Basics._op["++"],
                    _L.fromArray([$Graphics$Collage.filled(pong)(A2($Graphics$Collage.rect,
                                 gameWidth,
                                 gameHeight))
                                 ,make(_v29.ball)(_v29.ball.bigball ? A2($Graphics$Collage.oval,
                                 30,
                                 30) : A2($Graphics$Collage.oval,
                                 15,
                                 15))
                                 ,make(_v29.player)(A2($Graphics$Collage.rect,
                                 80,
                                 10))
                                 ,$Graphics$Collage.move({ctor: "_Tuple2"
                                                         ,_0: 0
                                                         ,_1: 200 - gameHeight / 2})($Graphics$Collage.toForm(_U.eq(_v29.state,
                                 Play) ? A2($Graphics$Element.spacer,
                                 1,
                                 1) : _U.eq(_v29.state,
                                 Won) && _U.eq(_v29.level,
                                 maxLevel) ? A2(txt,
                                 $Basics.identity,
                                 msgWon) : _U.eq(_v29.state,
                                 WonLevel1) ? A2(txt,
                                 $Basics.identity,
                                 msgNextLevel) : _U.eq(_v29.state,
                                 Lost) ? A2(txt,
                                 $Basics.identity,
                                 msgLost) : A2(txt,
                                 $Basics.identity,
                                 msg)))]),
                    makeList(_v29.bricks)(A2($Graphics$Collage.rect,
                    50,
                    10)))));
                 }();}
            _U.badCase($moduleName,
            "between lines 286 and 308");
         }();
      }();
   });
   var main = A3($Signal.map2,
   view,
   $Window.dimensions,
   gameState);
   _elm.Main.values = {_op: _op
                      ,gameHeight: gameHeight
                      ,gameWidth: gameWidth
                      ,halfHeight: halfHeight
                      ,halfWidth: halfWidth
                      ,xLeftProximity: xLeftProximity
                      ,xRightProximity: xRightProximity
                      ,yLowerProximity: yLowerProximity
                      ,yUpperProximity: yUpperProximity
                      ,maxLevel: maxLevel
                      ,Play: Play
                      ,Pause: Pause
                      ,Won: Won
                      ,Lost: Lost
                      ,WonLevel1: WonLevel1
                      ,Ball: Ball
                      ,Player: Player
                      ,Brick: Brick
                      ,Game: Game
                      ,player: player
                      ,defaultGame: defaultGame
                      ,levelTwo: levelTwo
                      ,Input: Input
                      ,update: update
                      ,updateBall: updateBall
                      ,brickCollision: brickCollision
                      ,inRange: inRange
                      ,isCollidingBrickFunction: isCollidingBrickFunction
                      ,emptyCollidingBrickFunction: emptyCollidingBrickFunction
                      ,emptyBrickSpecialMultiplierFunction: emptyBrickSpecialMultiplierFunction
                      ,emptyCollidingBigballBrickFunction: emptyCollidingBigballBrickFunction
                      ,brickSpecialMultiplierFunction: brickSpecialMultiplierFunction
                      ,isCollidingBigBallBrickFunction: isCollidingBigBallBrickFunction
                      ,countBricks: countBricks
                      ,updateBricks: updateBricks
                      ,physicsUpdate: physicsUpdate
                      ,physicsUpdatePlayer: physicsUpdatePlayer
                      ,updatePlayer: updatePlayer
                      ,filterBrick: filterBrick
                      ,near: near
                      ,stepVx: stepVx
                      ,stepVy: stepVy
                      ,view: view
                      ,pong: pong
                      ,textGreen: textGreen
                      ,txt: txt
                      ,msg: msg
                      ,msgWon: msgWon
                      ,msgLost: msgLost
                      ,msgNextLevel: msgNextLevel
                      ,make: make
                      ,makeList: makeList
                      ,asignColor: asignColor
                      ,main: main
                      ,gameState: gameState
                      ,delta: delta
                      ,input: input};
   return _elm.Main.values;
};